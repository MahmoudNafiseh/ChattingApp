{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\chat\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport * as React from 'react';\nimport { ChakraProvider, Box, Text, VStack, Grid, theme, Button } from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport Amplify, { Auth, withSSRContext } from 'aws-amplify';\nimport awsconfig from './aws-exports';\nimport { withAuthenticator } from '@aws-amplify/ui-react';\nimport { useEffect, useState } from 'react';\nimport { listMessages } from './graphql/queries';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nAmplify.configure({ ...awsconfig,\n  ssr: true\n});\n\nconst App = _ref => {\n  _s();\n\n  let {\n    messages\n  } = _ref;\n  const [user, setUser] = useState(null);\n  const [stateMessages, setStateMessages] = useState([...messages]);\n  const [messageText, setMessageText] = useState('');\n  useEffect(() => {\n    const fetchUser = async () => {\n      try {\n        const amplifyUser = await Auth.currentAuthenticatedUser();\n        setUser(amplifyUser);\n      } catch (err) {\n        setUser(null);\n      }\n    };\n\n    fetchUser();\n  }, []);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log(e.target[0].value);\n  };\n\n  const getServerSideProps = async req => {\n    const SSR = withSSRContext(req);\n\n    try {\n      const user = await SSR.Auth.currentAuthenticatedUser();\n      const response = await SSR.API.graphql({\n        query: listMessages,\n        authMode: 'AMAZON_COGNITO_USER_POOLS'\n      });\n      return {\n        props: {\n          messages: response.data.listMessages.items\n        }\n      };\n    } catch (error) {\n      return {\n        props: {\n          messages: []\n        }\n      };\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(ChakraProvider, {\n    theme: theme,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      textAlign: \"center\",\n      fontSize: \"xl\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        minH: \"100vh\",\n        p: 3,\n        children: [/*#__PURE__*/_jsxDEV(ColorModeSwitcher, {\n          justifySelf: \"flex-end\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(VStack, {\n          spacing: 8,\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            children: \"AWS Live Chat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"message\",\n              name: \"message\",\n              autoFocus: true,\n              required: true,\n              placeholder: \"Send a message\",\n              value: messageText,\n              onChange: e => setMessageText(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 22\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              children: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 22\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 16\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 7\n  }, this);\n};\n\n_s(App, \"/rb1CjYpAfPXQWs04WX9Ls6ZO90=\");\n\n_c = App;\nexport default _c2 = withAuthenticator(App);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/User/chat/src/App.tsx"],"names":["React","ChakraProvider","Box","Text","VStack","Grid","theme","Button","ColorModeSwitcher","Amplify","Auth","withSSRContext","awsconfig","withAuthenticator","useEffect","useState","listMessages","configure","ssr","App","messages","user","setUser","stateMessages","setStateMessages","messageText","setMessageText","fetchUser","amplifyUser","currentAuthenticatedUser","err","handleSubmit","e","preventDefault","console","log","target","value","getServerSideProps","req","SSR","response","API","graphql","query","authMode","props","data","items","error"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n   ChakraProvider,\n   Box,\n   Text,\n   Link,\n   VStack,\n   Code,\n   Grid,\n   theme,\n   Button,\n} from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport Amplify, {\n   Auth,\n   withSSRContext,\n   API,\n   graphqlOperation,\n} from 'aws-amplify';\nimport awsconfig from './aws-exports';\nimport { withAuthenticator } from '@aws-amplify/ui-react';\nimport { useEffect, useState } from 'react';\nimport { listMessages } from './graphql/queries';\nimport { createMessage } from './graphql/mutations';\nimport { onCreateMessage } from './graphql/subscriptions';\nAmplify.configure({ ...awsconfig, ssr: true });\n\nconst App = ({ messages }: any) => {\n   const [user, setUser] = useState(null);\n   const [stateMessages, setStateMessages] = useState([...messages]);\n   const [messageText, setMessageText] = useState('');\n\n   useEffect(() => {\n      const fetchUser = async () => {\n         try {\n            const amplifyUser = await Auth.currentAuthenticatedUser();\n            setUser(amplifyUser);\n         } catch (err) {\n            setUser(null);\n         }\n      };\n      fetchUser();\n   }, []);\n   const handleSubmit = (e: any) => {\n      e.preventDefault();\n      console.log(e.target[0].value);\n   };\n\n   const getServerSideProps = async (req?: any) => {\n      const SSR = withSSRContext(req);\n\n      try {\n         const user = await SSR.Auth.currentAuthenticatedUser();\n         const response = await SSR.API.graphql({\n            query: listMessages,\n            authMode: 'AMAZON_COGNITO_USER_POOLS',\n         });\n         return {\n            props: {\n               messages: response.data.listMessages.items,\n            },\n         };\n      } catch (error) {\n         return {\n            props: {\n               messages: [],\n            },\n         };\n      }\n   };\n   return (\n      <ChakraProvider theme={theme}>\n         <Box textAlign='center' fontSize='xl'>\n            <Grid minH='100vh' p={3}>\n               <ColorModeSwitcher justifySelf='flex-end' />\n               <VStack spacing={8}>\n                  <Text>AWS Live Chat</Text>\n\n                  <form onSubmit={handleSubmit}>\n                     <input\n                        type='text'\n                        id='message'\n                        name='message'\n                        autoFocus\n                        required\n                        placeholder='Send a message'\n                        value={messageText}\n                        onChange={(e) => setMessageText(e.target.value)}\n                     />\n                     <Button>Send</Button>\n                  </form>\n               </VStack>\n            </Grid>\n         </Box>\n      </ChakraProvider>\n   );\n};\n\nexport default withAuthenticator(App);\n"]},"metadata":{},"sourceType":"module"}